name: Backend API

on:
  push:
    branches:
      - main

env:
  TEST_DB_NAME: test
  TEST_DB_USER: postgres
  TEST_DB_PASSWORD: postgres
  TEST_DB_HOST: localhost
  DB_NAME: reading_api_db
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_HOST: localhost
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres
  POSTGRES_HOST: postgres

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
          POSTGRES_DB: $POSTGRES_DB
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Build API base image
      uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r ./requirements.txt
    - name: Check code Linting with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Connect to PostgreSQL
      env:
        POSTGRES_HOST: $POSTGRES_HOST
        POSTGRES_PORT: 5432
      run: |
        python ./scripts/create_db.py --dbname $DB_NAME --dbuser $DB_USER --dbpassword $DB_PASSWORD --dbhost $DB_HOST --dbport 5432
        python ./scripts/create_db.py --dbname $TEST_DB_USER --dbuser $DB_USER --dbpassword $DB_PASSWORD --dbhost $DB_HOST --dbport 5432
    - name: Build & Push Image
      run: |
        echo "${{ secrets.DOCKERPASSWORD }}" | docker login --username ehiaig --password-stdin
        docker build -t ehiaig/backend-technical-api:v1.0 .
        docker push ehiaig/backend-technical-api:v1.0
    - name: Start API service 
      run: docker-compose up -d
    - name: Run unit tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
        # TEST_DB_NAME: test
        # TEST_DB_USER: postgres
        # TEST_DB_PASSWORD: postgres
        # TEST_DB_HOST: localhost
        # DB_NAME: reading_api_db
        # DB_USER: postgres
        # DB_PASSWORD: postgres
        # DB_HOST: localhost
      run: |
        pytest
        # pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      